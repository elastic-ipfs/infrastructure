name: 'PeerSubsystem'

on:
  push:
    branches:
    - app-testing
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}

    defaults:
      run:
        shell: bash
        working-directory: ./terraform/peer-subsystem

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    - name: List files
      run: ls -l

    - name: Create .kube dir
      # run: echo ${{ secrets.KUBE_CONFIG }} | base64 -d > .env.production
      run: mkdir $HOME/.kube

    - name: Save kubeconfig
      # run: echo ${{ secrets.KUBE_CONFIG }} | base64 -d > .env.production
      run: echo "$KUBE_CONFIG" > $HOME/.kube/config
      # run: echo "$KUBE_CONFIG"

    # # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    # - name: Setup Terraform
    #   uses: hashicorp/setup-terraform@v1
    #   # with:
    #   #   cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # # Checks that all Terraform configuration files adhere to a canonical format
    # - name: Terraform Format
    #   run: terraform fmt -var kubeconfig_output_path=$HOME/.kube/config -check

    # # Generates an execution plan for Terraform
    # - name: Terraform Plan
    #   run: terraform plan -var kubeconfig_output_path=$HOME/.kube/config

    #   # On push to main, build or change infrastructure according to Terraform configuration files
    #   # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
    #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -var kubeconfig_output_path=$HOME/.kube/config -auto-approve
    
    ## TODO: If kubeconfig was generated by terraform, save it as secret